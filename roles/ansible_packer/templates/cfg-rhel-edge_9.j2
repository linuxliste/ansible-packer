# RHEL 9 edge image kickstart file

rootpw --lock
text
cdrom
zerombr
clearpart --all --initlabel
autopart

firewall --enabled --service ssh
lang C.UTF-8
timezone --utc {{ timezone }}
{% for ntp_server in ntp_servers.split(',') %}
timesource --ntp-server {{ ntp_server }}
{% endfor %}
keyboard {{ keyboard }}
services --enabled tuned
{% if communicator == 'none' %}
poweroff
{% else %}
reboot
{% endif %}

ostreesetup --nogpg --osname=rhel --remote=edge --url={{ ostree_url }} --ref={{ ostree_href }}

%post
systemctl enable rhcd.service
systemctl enable insights-client.service
systemctl enable cockpit.socket
tuned-adm profile virtual-guest
echo -e "admin     ALL=(ALL)       NOPASSWD: ALL\n" > /etc/sudoers.d/admin
%end

{% if root_ssh_key is defined %}
%post
mkdir -m 0700 /root/.ssh
echo "{{ root_ssh_key }}" > /root/.ssh/authorized_keys
chmod 0600 /root/.ssh/authorized_keys
restorecon -R /root/.ssh
%end
{% endif %}

{% if packer_builder == 'vmware' %}
%post --erroronfail
vmtoolsd -b /run/vmtoolsd.pid
%end
{% endif %}

{% if custom_section_early is defined %}
{{ custom_section_early }}
{% endif %}

%post --erroronfail

{% if create_admin | bool %}
# Create admin group and user
groupadd -g {{ admin_user.gid }} {{ admin_user.group }}
useradd -c "{{ admin_user.gecos }}" -d {{ admin_user.home }} -g {{ admin_user.gid }} -G {{ admin_user.groups }} -m -u {{ admin_user.uid }} {{ admin_user.name }}
{% if admin_user.ssh_key is defined %}
mkdir -m 0700 {{ admin_user.home }}/.ssh
echo "{{ admin_user.ssh_key }}" > {{ admin_user.home }}/.ssh/authorized_keys
chmod 0600 {{ admin_user.home }}/.ssh/authorized_keys
chown -R {{ admin_user.uid }}:{{ admin_user.gid }} {{ admin_user.home }}/.ssh
restorecon -R {{ admin_user.home }}/.ssh
{% endif %}
chown -R {{ admin_user.uid }}:{{ admin_user.gid }} /var/lib/exec
{% if admin_user.passwordless_sudo is defined and admin_user.passwordless_sudo | bool %}
{% if admin_user.groups is not defined or 'wheel' not in admin_user.groups %}
usermod -a -G wheel {{ admin_user.name }}
{% endif %}
echo '{{ admin_user.name }} ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/{{ admin_user.name }}
chmod 0440 /etc/sudoers.d/{{ admin_user.name }}
restorecon /etc/sudoers.d/{{ admin_user.name }}
{% endif %}

{% if not root_permit_local | bool %}
{% if root_permit_override_security_policy | bool %}
# Lock root account - caution needed
passwd -l root
{% endif %}
{% endif %}
{% endif %}

# Configure root SSH access
{% if security_policy is not defined or
  (security_policy is defined and root_permit_override_security_policy | bool) %}
echo "PermitRootLogin {{ root_permit_ssh }}" > /etc/ssh/sshd_config.d/0-local.conf
{% endif %}

{% if packer_builder == 'iso' %}
# Clean up permanent network configuration file
for netdev in $(nmcli -t dev | cut -d: -f1 | grep -v lo); do
  sed -i -e '/dhcp-/d' /etc/NetworkManager/system-connections/$netdev.nmconnection
  sed -i -e '/origin/d' /etc/NetworkManager/system-connections/$netdev.nmconnection
done
{% endif %}

{% if packer_builder != 'iso' %}
# Remove machine identification and state
for netdev in $(nmcli -t dev | cut -d: -f1 | grep -v lo); do
  sed -i -e '/uuid=/d' /etc/NetworkManager/system-connections/$netdev.nmconnection
  sed -i -e '/dhcp-/d' /etc/NetworkManager/system-connections/$netdev.nmconnection
  sed -i -e '/origin/d' /etc/NetworkManager/system-connections/$netdev.nmconnection
  sed -i -e '/timestamp/d' /etc/NetworkManager/system-connections/$netdev.nmconnection
{% if network_setup_purge | bool %}
  sed -i -e '/dns-/d' /etc/NetworkManager/system-connections/$netdev.nmconnection
  sed -i -e '/address/d' /etc/NetworkManager/system-connections/$netdev.nmconnection
{% endif %}
done
truncate -s 0 /etc/machine-id /etc/resolv.conf
/bin/rm -rf /etc/systemd/network/7* /etc/udev/rules.d/7* /etc/ssh/ssh_host_*
/bin/rm -rf /var/lib/systemd/random-seed
{% endif %}

# Ensure everything is written to the disk
sync ; echo 3 > /proc/sys/vm/drop_caches ;
%end

{% if custom_section_late is defined %}
{{ custom_section_late }}
{% endif %}
