---
# Remote management account name
win_remote_user: winrm

# Optional administrators SSH key to install
#win_admin_ssh_key:

# Setup SSH for remote access
win_remote_setup_ssh: |
  Get-NetConnectionProfile | Set-NetConnectionProfile -NetworkCategory Private
  $missing = Get-WindowsCapability -Name 'OpenSSH.Server*' -Online | ? State -ne 'Installed'
  if ($missing) {
    $result = Add-WindowsCapability -Name $missing.Name -Online
    if ((Get-WindowsCapability -Name $missing.Name -Online | ? State -ne 'Installed')) {
      Write-Host "Failed to install OpenSSH.Server capability: $result"
      Exit 1
    }
  }
  Start-Service -Name sshd
  Set-Service -Name sshd -StartupType Automatic
  Set-ItemProperty -Path HKLM:\SOFTWARE\OpenSSH -Name DefaultShell -Value C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
  $rule = Get-NetFirewallRule -Name OpenSSH-Server-In-TCP -ErrorAction SilentlyContinue
  if (-not $rule) {
    New-NetFirewallRule `
      -Enabled True `
      -Name OpenSSH-Server-In-TCP `
      -DisplayName 'OpenSSH SSH Server (sshd)' `
      -Description 'Inbound rule for OpenSSH SSH Server (sshd)' `
      -Group 'OpenSSH Server' `
      -LocalPort 22 `
      -Action Allow `
      -Direction Inbound `
      -Protocol TCP `
      -Profile @('Domain', 'Private')
  }
  if ($rule -and ($rule.Enabled -ne 'True' -or $rule.Action -ne 'Allow')) {
    Set-NetFirewallRule -Name OpenSSH-Server-In-TCP -Enabled True -Profile @('Domain', 'Private') -Action Allow
  }
  $keyFile = 'C:\ProgramData\ssh\administrators_authorized_keys'
  $publicKey = '{{ win_admin_ssh_key | default("", true) }}'
  if (-not (Test-Path -Path $keyFile)) {
    New-Item -Path $keyFile -ItemType File
  }
  icacls.exe $keyFile /inheritance:r /grant ""Administrators:F"" /grant ""SYSTEM:F""
  if ($publicKey.StartsWith('ssh')) {
    Add-Content -Path $keyFile -Value $publicKey
  }

# Setup WinRM for remote access
win_remote_setup_winrm: |
  Get-NetConnectionProfile | Set-NetConnectionProfile -NetworkCategory Private
  Start-Service -Name WinRM
  Set-Service -Name WinRM -StartupType Automatic
  Set-Item -Path WSMan:\localhost\Service\AllowUnencrypted -Value $false
  Set-Item -Path WSMan:\localhost\Service\Auth\Basic -Value $true
  Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
  Set-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System -Name LocalAccountTokenFilterPolicy -Value 1
  $user = '{{ win_remote_user }}'
  Add-LocalGroupMember -Group 'Remote Management Users' -Member $user
  $sid = (New-Object -TypeName System.Security.Principal.NTAccount -ArgumentList $user).Translate([System.Security.Principal.SecurityIdentifier])
  $sddl = (Get-Item -Path WSMan:\localhost\Service\RootSDDL).Value
  $sd = New-Object -TypeName System.Security.AccessControl.CommonSecurityDescriptor -ArgumentList $false, $false, $sddl
  $sd.DiscretionaryAcl.AddAccess(
    [System.Security.AccessControl.AccessControlType]::Allow,
    $sid,
    [int]0x10000000,
    [System.Security.AccessControl.InheritanceFlags]::None,
    [System.Security.AccessControl.PropagationFlags]::None
    )
  $sddl = $sd.GetSddlForm([System.Security.AccessControl.AccessControlSections]::All)
  Set-Item -Path WSMan:\localhost\Service\RootSDDL -Value $sddl -Force
  $rule = Get-NetFirewallRule -Name WINRM-HTTP-In-TCP -ErrorAction SilentlyContinue
  if (-not $rule) {
    New-NetFirewallRule `
      -Enabled True `
      -Name WINRM-HTTP-In-TCP `
      -DisplayName 'Windows Remote Management (HTTP-In)' `
      -Description 'Inbound rule for Windows Remote Management via WS-Management. [TCP 5985]' `
      -Group '@FirewallAPI.dll,-30267' `
      -LocalPort 5985 `
      -Action Allow `
      -Direction Inbound `
      -Protocol TCP `
      -Profile @('Domain', 'Private')
  }
  if ($rule -and ($rule.Enabled -ne 'True' -or $rule.Action -ne 'Allow')) {
    Set-NetFirewallRule -Name WINRM-HTTP-In-TCP -Enabled True -Profile @('Domain', 'Private') -Action Allow
  }
  $friendlyName = 'WinRM over HTTPS'
  $cert = Get-ChildItem -Path Cert:\LocalMachine\My | ? FriendlyName -eq $friendlyName
  if (-not $cert) {
    $cert = New-SelfSignedCertificate -CertStoreLocation Cert:\LocalMachine\My `
              -DnsName $env:COMPUTERNAME -NotAfter (get-date).AddYears(10) `
              -Provider 'Microsoft Software Key Storage Provider'
    $cert.FriendlyName = $friendlyName
  }
  $listener = Get-WSManInstance winrm/config/Listener -Enumerate | ? Transport -eq 'HTTPS'
  $command = if ($listener) { 'Set-WSManInstance' } else { 'New-WSManInstance' }
  & $command -ResourceURI winrm/config/Listener `
    -SelectorSet @{Address='*';Transport='HTTPS'} `
    -ValueSet @{CertificateThumbprint=$cert.Thumbprint;Enabled=$true}
  $rule = Get-NetFirewallRule -Name WINRM-HTTPS-In-TCP -ErrorAction SilentlyContinue
  if (-not $rule) {
    New-NetFirewallRule `
      -Enabled True `
      -Name WINRM-HTTPS-In-TCP `
      -DisplayName 'Windows Remote Management (HTTPS-In)' `
      -Description 'Inbound rule for Windows Remote Management via WS-Management. [TCP 5986]' `
      -Group '@FirewallAPI.dll,-30267' `
      -LocalPort 5986 `
      -Action Allow `
      -Direction Inbound `
      -Protocol TCP `
      -Profile @('Domain', 'Private')
  }
  if ($rule -and ($rule.Enabled -ne 'True' -or $rule.Action -ne 'Allow')) {
    Set-NetFirewallRule -Name WINRM-HTTPS-In-TCP -Enabled True -Profile @('Domain', 'Private') -Action Allow
  }

# Remote access method to configure
# By default both SSH and WinRM are enabled
win_remote_setup: |
  {{ win_remote_setup_ssh }}

  {{ win_remote_setup_winrm }}
