---
- name: Fail if not supported OS ISO URL
  fail:
    msg: "Custom ISO building requires file:// type URL."
  when: "'file://' not in iso[packer_target].url"

- name: Set OS ISO path
  set_fact:
    os_iso_path: "{{ iso[packer_target].url | regex_replace('^file://', '') }}"

- name: Set custom ISO full path
  set_fact:
    image_path: "{{ output_directory + '/' + image_name | default(__target_fullname + '.iso', true) }}"

- name: Check existing custom ISO file
  stat:
    path: "{{ image_path }}"
  register: iso_image

- name: Fail if custom ISO file exists and not allowed to overwrite
  fail:
    msg: "Custom ISO file already exists and use_force not enabled."
  when: not use_force | bool and iso_image.stat.exists

- name: Create output directory
  file:
    path: "{{ output_directory }}"
    state: directory
    mode: '0700'

- name: Create custom ISO build directory
  file:
    path: "{{ tempdir.path + '/iso-build' }}"
    state: directory
    mode: '0700'
  register: iso_build_dir

- name: Create custom Windows ISO drivers directory
  file:
    path: "{{ tempdir.path + '/iso-build/drivers' }}"
    state: directory
    mode: '0700'
  register: iso_drivers_dir
  when: win_winrm_password is defined and win_drivers_path is defined

- name: Copy OS ISO files to custom ISO build directory
  vars:
    iso_command: bsdtar -xf {{ os_iso_path }} -C {{ iso_build_dir.path }}
    udf_command: 7z x -o{{ iso_build_dir.path }} {{ os_iso_path }}
    run_command: "{{ iso_command if win_winrm_password is not defined else udf_command }}"
  command: "{{ run_command }}"
  changed_when: true

- name: Create custom ISO boot loader files
  template:
    src: "{{ item.src }}"
    dest: "{{ iso_build_dir.path + '/' + item.dest }}"
    mode: '0644'
  loop:
    - { 'src': 'grub.efi.j2', 'dest': 'EFI/BOOT/grub.cfg' }
    - { 'src': 'grub.iso.j2', 'dest': 'isolinux/grub.conf' }
    - { 'src': 'isolinux.cfg.j2', 'dest': 'isolinux/isolinux.cfg' }
  loop_control:
    label: "{{ item.dest }}"
  when: win_winrm_password is not defined

- name: Copy installer configuration
  copy:
    src: "{{ tempdir.path + '/inst.cfg' }}"
    dest: "{{ iso_build_dir.path + '/inst.cfg' }}"
    mode: '0600'
  when: win_winrm_password is not defined

- name: Copy Windows installer configurations
  copy:
    src: "{{ tempdir.path + '/' + item }}"
    dest: "{{ iso_build_dir.path + '/' + item }}"
    mode: '0600'
  loop:
    - autounattend.xml
    - configure-winrm.ps1
    - customize-system.ps1
  when: win_winrm_password is defined

- name: Copy Windows drivers directory
  ansible.posix.synchronize:
    src: "{{ win_drivers_path + '/' }}"
    dest: "{{ iso_drivers_dir.path }}"
    owner: false
    group: false
  when: win_winrm_password is defined and win_drivers_path is defined

- name: Remove existing custom ISO file
  file:
    path: "{{ image_path }}"
    state: absent
  when: use_force | bool and iso_image.stat.exists

- name: Build custom ISO file
  command:
    cmd: >
      {{ genisoimage_command }}
      -b isolinux/isolinux.bin
      -c isolinux/boot.cat
      -no-emul-boot
      -boot-load-size 4
      -boot-info-table
      -eltorito-alt-boot
      -e images/efiboot.img
      -no-emul-boot
      -input-charset UTF-8
      -J -joliet-long -l -r -T
      -V "{{ iso_volume_id }}"
      -o {{ image_path }} .
    chdir: "{{ iso_build_dir.path }}"
  changed_when: true
  when: win_winrm_password is not defined

- name: Build custom Windows ISO file
  command:
    cmd: >
      {{ genisoimage_command }}
      -b boot/etfsboot.com
      -no-emul-boot
      -boot-load-size 8
      -eltorito-alt-boot
      -e efi/microsoft/boot/efisys_noprompt.bin
      -no-emul-boot
      -boot-load-size 1
      -input-charset UTF-8
      -l -allow-limited-size
      -V "{{ win_iso_volume_id }}"
      -volset "{{ win_iso_volume_id }}"
      -o {{ image_path }} .
    chdir: "{{ iso_build_dir.path }}"
  changed_when: true
  when: win_winrm_password is defined

- name: Make custom ISO hybrid bootable
  command: isohybrid --uefi {{ image_path }}
  changed_when: true
  when: win_winrm_password is not defined

- name: Implant MD5 checksum into custom ISO
  command: implantisomd5 {{ image_path }}
  changed_when: true
  when: win_winrm_password is not defined

- name: Calculate custom ISO SHA256 checksum
  command: sha256sum {{ image_path }}
  changed_when: false
  register: sha256sum_result

- name: Write SHA256 checksum to image checksum file
  copy:
    content: "{{ sha256sum_result.stdout + '\n' }}"
    dest: "{{ output_directory + '/' + image_checksum_file }}"
    mode: '0644'
