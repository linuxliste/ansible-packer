---
- name: Fail if not supported OS ISO URL
  ansible.builtin.fail:
    msg: "Custom ISO building requires file:// type URL."
  when: "'file://' not in iso[packer_target].url"

- name: Set OS ISO path
  ansible.builtin.set_fact:
    __apc_os_iso_path: "{{ iso[packer_target].url | regex_replace('^file://', '') }}"

- name: Set custom ISO full path
  ansible.builtin.set_fact:
    __apc_image_path: "{{ output_directory + '/' + image_name | default(__target_fullname + '.iso', true) }}"

- name: Check existing custom ISO file
  ansible.builtin.stat:
    path: "{{ __apc_image_path }}"
  register: __apc_iso_image

- name: Fail if custom ISO file exists and not allowed to overwrite
  ansible.builtin.fail:
    msg: "Custom ISO file already exists and use_force not enabled."
  when: not use_force | bool and __apc_iso_image.stat.exists

- name: Create output directory
  ansible.builtin.file:
    path: "{{ output_directory }}"
    state: directory
    mode: '0700'

- name: Create custom ISO build directory
  ansible.builtin.file:
    path: "{{ __apc_tempdir.path + '/iso-build' }}"
    state: directory
    mode: '0700'
  register: __apc_iso_build_dir

- name: Create custom Windows ISO drivers directory
  ansible.builtin.file:
    path: "{{ __apc_tempdir.path + '/iso-build/drivers' }}"
    state: directory
    mode: '0700'
  register: __apc_iso_drivers_dir
  when: win_admin_password is defined and win_drivers_path is defined

- name: Copy OS ISO files to custom ISO build directory
  vars:
    __apc_iso_command: bsdtar -xf {{ __apc_os_iso_path }} -C {{ __apc_iso_build_dir.path }}
    __apc_udf_command: 7z x -o{{ __apc_iso_build_dir.path }} {{ __apc_os_iso_path }}
    __apc_run_command: "{{ __apc_iso_command if win_admin_password is not defined else __apc_udf_command }}"
  ansible.builtin.command: "{{ __apc_run_command }}"
  changed_when: true

- name: Create custom ISO boot loader files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ __apc_iso_build_dir.path + '/' + item.dest }}"
    mode: "{{ item.mode }}"
  loop:
    - {src: grub.efi.j2, dest: EFI/BOOT/grub.cfg, mode: '0700'}
    - {src: grub.iso.j2, dest: isolinux/grub.conf, mode: '0644'}
    - {src: isolinux.cfg.j2, dest: isolinux/isolinux.cfg, mode: '0644'}
  loop_control:
    label: "{{ item.dest }}"
  when: win_admin_password is not defined

- name: Copy installer configuration
  ansible.builtin.copy:
    src: "{{ __apc_tempdir.path + '/inst.cfg' }}"
    dest: "{{ __apc_iso_build_dir.path + '/inst.cfg' }}"
    mode: '0600'
  when: win_admin_password is not defined

- name: Copy Windows installer configurations
  ansible.builtin.copy:
    src: "{{ __apc_tempdir.path + '/' + item }}"
    dest: "{{ __apc_iso_build_dir.path + '/' + item }}"
    mode: '0600'
  loop:
    - autounattend.xml
    - sysprep.xml
    - custom.ps1
    - remote.ps1
  when: win_admin_password is defined

- name: Copy Windows drivers directory
  ansible.posix.synchronize:
    src: "{{ win_drivers_path + '/' }}"
    dest: "{{ __apc_iso_drivers_dir.path }}"
    owner: false
    group: false
  when: win_admin_password is defined and win_drivers_path is defined

- name: Remove existing custom ISO file
  ansible.builtin.file:
    path: "{{ __apc_image_path }}"
    state: absent
  when: use_force | bool and __apc_iso_image.stat.exists

- name: Update custom ISO boot loader files for USB
  become: true
  # noqa: command-instead-of-module
  ansible.builtin.shell: |
    mount -o loop {{ __apc_iso_build_dir.path }}/images/efiboot.img {{ __apc_iso_build_dir.path }}/isolinux
    cat {{ __apc_iso_build_dir.path }}/EFI/BOOT/grub.cfg > {{ __apc_iso_build_dir.path }}/isolinux/EFI/BOOT/grub.cfg
    umount {{ __apc_iso_build_dir.path }}/isolinux
  changed_when: true
  when:
    - win_admin_password is not defined
    - iso_boot_usb_fix | bool

- name: Build custom ISO file
  ansible.builtin.command:
    cmd: >
      xorrisofs
      -b isolinux/isolinux.bin
      -c isolinux/boot.cat
      -no-emul-boot
      -boot-load-size 4
      -boot-info-table
      -eltorito-alt-boot
      -e images/efiboot.img
      -no-emul-boot
      -input-charset UTF-8
      -J -joliet-long -l -r -T
      -V "{{ iso_volume_id }}"
      -o {{ __apc_image_path }} .
    chdir: "{{ __apc_iso_build_dir.path }}"
  changed_when: true
  when: win_admin_password is not defined

- name: Build custom Windows ISO file
  ansible.builtin.command:
    cmd: >
      xorrisofs
      -b boot/etfsboot.com
      -no-emul-boot
      -boot-load-size 8
      -eltorito-alt-boot
      -e efi/microsoft/boot/efisys_noprompt.bin
      -no-emul-boot
      -input-charset UTF-8
      -J -joliet-long -l -iso-level 3
      -V "{{ win_iso_volume_id }}"
      -volset "{{ win_iso_volume_id }}"
      -o {{ __apc_image_path }} .
    chdir: "{{ __apc_iso_build_dir.path }}"
  changed_when: true
  when: win_admin_password is defined

- name: Make custom ISO hybrid bootable
  ansible.builtin.command: isohybrid --uefi {{ __apc_image_path }}
  changed_when: true
  when: win_admin_password is not defined

- name: Implant MD5 checksum into custom ISO
  ansible.builtin.command: implantisomd5 {{ __apc_image_path }}
  changed_when: true
  when: win_admin_password is not defined

- name: Calculate custom ISO SHA256 checksum
  ansible.builtin.command: sha256sum {{ __apc_image_path }}
  changed_when: false
  register: __apc_sha256sum_result

- name: Write SHA256 checksum to image checksum file
  ansible.builtin.copy:
    content: "{{ __apc_sha256sum_result.stdout + '\n' }}"
    dest: "{{ output_directory + '/' + image_checksum_file }}"
    mode: '0644'
