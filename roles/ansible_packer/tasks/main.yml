---
- name: Locate old outputs
  vars:
    __apc_sys_temp: "{{ lookup('env', 'TMPDIR') | default('/tmp', true) }}"
  ansible.builtin.find:
    paths: "{{ [__apc_sys_temp, output_directory | default(__apc_sys_temp + '/.nothing') | dirname] | unique }}"
    file_type: any
    patterns:
      - 'ansible*_packer_build_*'
      - "{{ output_directory | default(__apc_sys_temp + '/.nothing') | basename }}"
    recurse: false
  register: __apc_old_outputs
  when: do_cleanup | bool

- name: Remove old outputs
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ __apc_old_outputs.files }}"
  loop_control:
    label: "{{ item.path }}"
  when: do_cleanup | bool

- name: Create temporary work directory
  ansible.builtin.tempfile:
    state: directory
    suffix: _packer_build_{{ packer_builder }}_{{ __target_fullname }}
  register: __apc_tempdir

- name: Create installer configuration file
  ansible.builtin.template:
    src: cfg-{{ __target_config }}.j2
    dest: "{{ __apc_tempdir.path }}/inst.cfg"
    mode: '0600'
  when: win_admin_password is not defined

- name: Create Windows installer configuration files
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ __apc_tempdir.path + '/' + item }}"
    mode: '0600'
  loop:
    - autounattend.xml
    - sysprep.xml
    - custom.ps1
    - remote.ps1
    - win_packer.yml
  when: win_admin_password is defined

- name: Include ISO tasks
  ansible.builtin.include_tasks: iso.yml
  when: packer_builder == 'iso'

- name: Include Packer tasks
  ansible.builtin.include_tasks: packer.yml
  when: packer_builder != 'iso'

- name: Remove temporary work directory
  ansible.builtin.file:
    path: "{{ __apc_tempdir.path }}"
    state: absent
