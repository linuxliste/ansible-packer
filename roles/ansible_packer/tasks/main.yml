---
- name: Locate old outputs
  vars:
    sys_temp: "{{ lookup('env', 'TMPDIR') | default('/tmp', true) }}"
  find:
    paths: "{{ [sys_temp, output_directory | default(sys_temp + '/.nothing') | dirname] | unique }}"
    file_type: any
    patterns:
      - 'ansible*_packer_build_*'
      - "{{ output_directory | default(sys_temp + '/.nothing') | basename }}"
    recurse: false
  register: old_outputs
  when: do_cleanup | bool

- name: Remove old outputs
  file:
    state: absent
    path: "{{ item.path }}"
  loop: "{{ old_outputs.files }}"
  loop_control:
    label: "{{ item.path }}"
  when: do_cleanup | bool

- name: Create temporary work directory
  tempfile:
    state: directory
    suffix: _packer_build_{{ packer_builder }}_{{ __target_fullname }}
  register: tempdir

- name: Create installer configuration file
  template:
    src: cfg-{{ __target_config }}.j2
    dest: "{{ tempdir.path }}/inst.cfg"
    mode: '0600'
  when: win_winrm_password is not defined

- name: Create Windows installer configuration files
  template:
    src: "{{ item }}.j2"
    dest: "{{ tempdir.path + '/' + item }}"
    mode: '0600'
  loop:
    - autounattend.xml
    - configure-winrm.ps1
    - customize-system.ps1
    - sysprep.xml
    - win_packer.yml
  when: win_winrm_password is defined

- name: Include ISO tasks
  include_tasks: iso.yml
  when: packer_builder == 'iso'

- name: Include Packer tasks
  include_tasks: packer.yml
  when: packer_builder != 'iso'

- name: Remove temporary work directory
  file:
    state: absent
    path: "{{ tempdir.path }}"
